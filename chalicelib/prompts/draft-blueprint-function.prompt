Analyze the below list of files in a software project to determine what kind of software project it is, including characteristics of the architecture and design of that software.

Then do the following:

1. Tell me which single file in the list most likely describes how to build and deploy the project code.
2. Suggest one file to use as sample source code to represent the key elements of the software project.
3. Provide a list of high-confidence folders and folders in the software project that do not likely contain any useful source code or project or build information to analyze.
4. Produce an Architectural Blueprint Summary using this format - replacing the text in each section with your best guess based on only the file list and the type of software architecture you believe this project has:

    # Architectural Blueprint Summary for: {projectName}
    * Software Project Type: web app, server code, cloud web service, mobile app, shared library, etc.
    * High-Level Summary: Short summary of software project in a 2-3 sentences
    * Software Principles: multi-threaded, event-driven, data transformation, server processing, client app code, etc
    * Data Storage: shared memory, disk, database, SQL vs NoSQL, non-persisted, data separated from code
    * Software Licensing: Commercial & Non-Commercial licenses, Open Source licenses (BSD, MIT, GPL, LGPL, Apache, etc.). Identify conflicting licenses.
    * Security Handling: encrypted vs non-encrypted data, memory buffer management, shared memory protections, all input is untrusted or trusted
    * Performance characteristics: multi-threaded, non-blocking code, extra optimized, background tasks, CPU bound processing, etc.
    * Software resiliency patterns: fail fast, parameter validation, defensive code, error logging, etc.
    * Analysis of the architectural soundness and best practices: code is consistent with its programming language style, structure is consistent with its application or server framework
    * Architectural Problems Identified: coarse locks in multi-threaded, global and shared memory in library, UI in a non-interactive server, versioning fragility, etc.


The source and project file list to analyze is:

 {filelist}